import {
  classToClassList,
  debounce,
  htmlToElement
} from "./chunk-ROVTOOL3.js";
import {
  HSBasePlugin
} from "./chunk-3S4PPYC3.js";
import {
  __publicField
} from "./chunk-LNEMQRCO.js";

// node_modules/preline/src/plugins/datatable/index.ts
var HSDataTable = class _HSDataTable extends HSBasePlugin {
  constructor(el, options, events) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    super(el, options, events);
    __publicField(this, "concatOptions");
    __publicField(this, "dataTable");
    __publicField(this, "table");
    __publicField(this, "search");
    __publicField(this, "pageEntities");
    __publicField(this, "paging");
    __publicField(this, "pagingPrev");
    __publicField(this, "pagingNext");
    __publicField(this, "pagingPages");
    __publicField(this, "info");
    __publicField(this, "infoFrom");
    __publicField(this, "infoTo");
    __publicField(this, "infoLength");
    __publicField(this, "rowSelectingAll");
    __publicField(this, "rowSelectingIndividual");
    __publicField(this, "maxPagesToShow");
    __publicField(this, "isRowSelecting");
    __publicField(this, "pageBtnClasses");
    this.el = typeof el === "string" ? document.querySelector(el) : el;
    const columnDefs = [];
    Array.from(this.el.querySelectorAll("thead th, thead td")).forEach(
      (th, ind) => {
        if (th.classList.contains("--exclude-from-ordering"))
          columnDefs.push({
            targets: ind,
            orderable: false
          });
      }
    );
    const data = this.el.getAttribute("data-hs-datatable");
    const dataOptions = data ? JSON.parse(data) : {};
    this.concatOptions = {
      searching: true,
      lengthChange: false,
      order: [],
      columnDefs: [...columnDefs],
      ...dataOptions,
      ...options
    };
    this.table = this.el.querySelector("table");
    this.search = this.el.querySelector("[data-hs-datatable-search]") ?? null;
    this.pageEntities = this.el.querySelector("[data-hs-datatable-page-entities]") ?? null;
    this.paging = this.el.querySelector("[data-hs-datatable-paging]") ?? null;
    this.pagingPrev = this.el.querySelector("[data-hs-datatable-paging-prev]") ?? null;
    this.pagingNext = this.el.querySelector("[data-hs-datatable-paging-next]") ?? null;
    this.pagingPages = this.el.querySelector("[data-hs-datatable-paging-pages]") ?? null;
    this.info = this.el.querySelector("[data-hs-datatable-info]") ?? null;
    this.infoFrom = this.el.querySelector("[data-hs-datatable-info-from]") ?? null;
    this.infoTo = this.el.querySelector("[data-hs-datatable-info-to]") ?? null;
    this.infoLength = this.el.querySelector("[data-hs-datatable-info-length]") ?? null;
    if ((_a = this.concatOptions) == null ? void 0 : _a.rowSelectingOptions)
      this.rowSelectingAll = (((_c = (_b = this.concatOptions) == null ? void 0 : _b.rowSelectingOptions) == null ? void 0 : _c.selectAllSelector) ? document.querySelector(
        (_e = (_d = this.concatOptions) == null ? void 0 : _d.rowSelectingOptions) == null ? void 0 : _e.selectAllSelector
      ) : document.querySelector("[data-hs-datatable-row-selecting-all]")) ?? null;
    if ((_f = this.concatOptions) == null ? void 0 : _f.rowSelectingOptions)
      this.rowSelectingIndividual = ((_h = (_g = this.concatOptions) == null ? void 0 : _g.rowSelectingOptions) == null ? void 0 : _h.individualSelector) ?? "[data-hs-datatable-row-selecting-individual]" ?? null;
    if (this.pageEntities)
      this.concatOptions.pageLength = parseInt(this.pageEntities.value);
    this.maxPagesToShow = 3;
    this.isRowSelecting = !!((_i = this.concatOptions) == null ? void 0 : _i.rowSelectingOptions);
    this.pageBtnClasses = ((_k = (_j = this.concatOptions) == null ? void 0 : _j.pagingOptions) == null ? void 0 : _k.pageBtnClasses) ?? null;
    this.init();
  }
  init() {
    this.createCollection(window.$hsDataTableCollection, this);
    this.initTable();
    if (this.search)
      this.initSearch();
    if (this.pageEntities)
      this.initPageEntities();
    if (this.paging)
      this.initPaging();
    if (this.pagingPrev)
      this.initPagingPrev();
    if (this.pagingNext)
      this.initPagingNext();
    if (this.pagingPages)
      this.buildPagingPages();
    if (this.info)
      this.initInfo();
    if (this.isRowSelecting)
      this.initRowSelecting();
  }
  initTable() {
    this.dataTable = new DataTable(this.table, this.concatOptions);
    if (this.isRowSelecting)
      this.triggerChangeEventToRow();
    this.dataTable.on("draw", () => {
      if (this.isRowSelecting)
        this.updateSelectAllCheckbox();
      if (this.isRowSelecting)
        this.triggerChangeEventToRow();
      this.updateInfo();
      this.updatePaging();
    });
  }
  // Search
  initSearch() {
    this.search.addEventListener(
      "input",
      debounce(
        (evt) => this.onSearchInput(evt.target.value)
      )
    );
  }
  onSearchInput(val) {
    this.dataTable.search(val).draw();
  }
  // Page entities
  initPageEntities() {
    this.pageEntities.addEventListener(
      "change",
      (evt) => this.onEntitiesChange(parseInt(evt.target.value))
    );
  }
  onEntitiesChange(entities) {
    this.dataTable.page.len(entities).draw();
  }
  // Info
  initInfo() {
    if (this.infoFrom)
      this.initInfoFrom();
    if (this.infoTo)
      this.initInfoTo();
    if (this.infoLength)
      this.initInfoLength();
  }
  initInfoFrom() {
    const { start } = this.dataTable.page.info();
    this.infoFrom.innerText = `${start + 1}`;
  }
  initInfoTo() {
    const { end } = this.dataTable.page.info();
    this.infoTo.innerText = `${end}`;
  }
  initInfoLength() {
    const { recordsTotal } = this.dataTable.page.info();
    this.infoLength.innerText = `${recordsTotal}`;
  }
  updateInfo() {
    this.initInfo();
  }
  // Paging
  initPaging() {
    this.hidePagingIfSinglePage();
  }
  hidePagingIfSinglePage() {
    const { pages } = this.dataTable.page.info();
    if (pages < 2) {
      this.paging.classList.add("hidden");
      this.paging.style.display = "none";
    } else {
      this.paging.classList.remove("hidden");
      this.paging.style.display = "";
    }
  }
  initPagingPrev() {
    this.pagingPrev.addEventListener("click", () => {
      this.onPrevClick();
    });
  }
  onPrevClick() {
    this.dataTable.page("previous").draw("page");
  }
  disablePagingArrow(el, statement) {
    if (statement) {
      el.classList.add("disabled");
      el.setAttribute("disabled", "disabled");
    } else {
      el.classList.remove("disabled");
      el.removeAttribute("disabled");
    }
  }
  initPagingNext() {
    this.pagingNext.addEventListener("click", () => {
      this.onNextClick();
    });
  }
  onNextClick() {
    this.dataTable.page("next").draw("page");
  }
  buildPagingPages() {
    this.updatePaging();
  }
  updatePaging() {
    const { page, pages, length } = this.dataTable.page.info();
    const totalRecords = this.dataTable.rows({ search: "applied" }).count();
    const totalPages = Math.ceil(totalRecords / length);
    const currentPage = page + 1;
    let startPage = Math.max(
      1,
      currentPage - Math.floor(this.maxPagesToShow / 2)
    );
    let endPage = Math.min(totalPages, startPage + (this.maxPagesToShow - 1));
    if (endPage - startPage + 1 < this.maxPagesToShow) {
      startPage = Math.max(1, endPage - this.maxPagesToShow + 1);
    }
    this.pagingPages.innerHTML = "";
    if (startPage > 1) {
      this.buildPagingPage(1);
      if (startPage > 2) {
        this.pagingPages.appendChild(
          htmlToElement(`<span class="ellipsis">...</span>`)
        );
      }
    }
    for (let i = startPage; i <= endPage; i++) {
      this.buildPagingPage(i);
    }
    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        this.pagingPages.appendChild(
          htmlToElement(`<span class="ellipsis">...</span>`)
        );
      }
      this.buildPagingPage(totalPages);
    }
    this.disablePagingArrow(this.pagingPrev, page === 0);
    this.disablePagingArrow(this.pagingNext, page === pages - 1);
    this.hidePagingIfSinglePage();
  }
  buildPagingPage(counter) {
    const { page } = this.dataTable.page.info();
    const pageEl = htmlToElement(`<button type="button"></button>`);
    pageEl.innerText = `${counter}`;
    pageEl.setAttribute("data-page", `${counter}`);
    if (this.pageBtnClasses)
      classToClassList(this.pageBtnClasses, pageEl);
    if (page === counter - 1)
      pageEl.classList.add("active");
    pageEl.addEventListener("click", () => this.onPageClick(counter));
    this.pagingPages.append(pageEl);
  }
  onPageClick(counter) {
    this.dataTable.page(counter - 1).draw("page");
  }
  // Select row
  initRowSelecting() {
    this.rowSelectingAll.addEventListener(
      "change",
      () => this.onSelectAllChange()
    );
  }
  triggerChangeEventToRow() {
    this.table.querySelectorAll(`tbody ${this.rowSelectingIndividual}`).forEach((el) => {
      el.addEventListener("change", () => {
        this.updateSelectAllCheckbox();
      });
    });
  }
  onSelectAllChange() {
    let isChecked = this.rowSelectingAll.checked;
    const visibleRows = Array.from(
      this.dataTable.rows({ page: "current", search: "applied" }).nodes()
    );
    visibleRows.forEach((el) => {
      const checkbox = el.querySelector(this.rowSelectingIndividual);
      if (checkbox)
        checkbox.checked = isChecked;
    });
    this.updateSelectAllCheckbox();
  }
  updateSelectAllCheckbox() {
    const searchRelatedItems = this.dataTable.rows({ search: "applied" }).count();
    if (!searchRelatedItems) {
      this.rowSelectingAll.checked = false;
      return false;
    }
    let isChecked = true;
    const visibleRows = Array.from(
      this.dataTable.rows({
        page: "current",
        search: "applied"
      }).nodes()
    );
    visibleRows.forEach((el) => {
      const checkbox = el.querySelector(this.rowSelectingIndividual);
      if (checkbox && !checkbox.checked) {
        isChecked = false;
        return false;
      }
    });
    this.rowSelectingAll.checked = isChecked;
  }
  // Static methods
  static getInstance(target, isInstance) {
    const elInCollection = window.$hsDataTableCollection.find(
      (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
    );
    return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
  }
  static autoInit() {
    if (!window.$hsDataTableCollection)
      window.$hsDataTableCollection = [];
    document.querySelectorAll("[data-hs-datatable]:not(.--prevent-on-load-init)").forEach((el) => {
      if (!window.$hsDataTableCollection.find(
        (elC) => {
          var _a;
          return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
        }
      ))
        new _HSDataTable(el);
    });
  }
};
window.addEventListener("load", () => {
  if (document.querySelectorAll(
    "[data-hs-datatable]:not(.--prevent-on-load-init)"
  ).length) {
    if (typeof jQuery === "undefined")
      console.error(
        "HSDataTable: jQuery is not available, please add it to the page."
      );
    if (typeof DataTable === "undefined")
      console.error(
        "HSDataTable: DataTable is not available, please add it to the page."
      );
  }
  if (typeof DataTable !== "undefined" && typeof jQuery !== "undefined")
    HSDataTable.autoInit();
});
if (typeof window !== "undefined") {
  window.HSDataTable = HSDataTable;
}
var datatable_default = HSDataTable;

export {
  datatable_default
};
/*! Bundled license information:

preline/src/plugins/datatable/index.ts:
  (*
   * HSDataTable
   * @version: 2.5.0
   * @author: Preline Labs Ltd.
   * @license: Licensed under MIT and Preline UI Fair Use License (https://preline.co/docs/license.html)
   * Copyright 2024 Preline Labs Ltd.
   *)
*/
//# sourceMappingURL=chunk-XUDN2JYV.js.map
