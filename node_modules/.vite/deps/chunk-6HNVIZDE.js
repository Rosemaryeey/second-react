import {
  HSBasePlugin
} from "./chunk-3S4PPYC3.js";
import {
  __publicField
} from "./chunk-LNEMQRCO.js";

// node_modules/preline/src/plugins/range-slider/index.ts
var HSRangeSlider = class _HSRangeSlider extends HSBasePlugin {
  constructor(el, options, events) {
    super(el, options, events);
    __publicField(this, "concatOptions");
    __publicField(this, "format");
    const data = el.getAttribute("data-hs-range-slider");
    const dataOptions = data ? JSON.parse(data) : {};
    this.concatOptions = {
      ...dataOptions,
      ...options,
      cssClasses: {
        ...noUiSlider.cssClasses,
        ...this.processClasses(dataOptions.cssClasses)
      }
    };
    this.init();
  }
  get formattedValue() {
    const values = this.el.noUiSlider.get();
    if (Array.isArray(values) && this.format) {
      const updateValues = [];
      values.forEach((val) => {
        updateValues.push(this.format.to(val));
      });
      return updateValues;
    } else if (this.format) {
      return this.format.to(values);
    } else {
      return values;
    }
  }
  processClasses(cl) {
    const mergedClasses = {};
    Object.keys(cl).forEach((key) => {
      if (key)
        mergedClasses[key] = `${noUiSlider.cssClasses[key]} ${cl[key]}`;
    });
    return mergedClasses;
  }
  init() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
    this.createCollection(window.$hsRangeSliderCollection, this);
    if (typeof ((_a = this.concatOptions) == null ? void 0 : _a.formatter) === "object" ? ((_c = (_b = this.concatOptions) == null ? void 0 : _b.formatter) == null ? void 0 : _c.type) === "thousandsSeparatorAndDecimalPoints" : ((_d = this.concatOptions) == null ? void 0 : _d.formatter) === "thousandsSeparatorAndDecimalPoints")
      this.thousandsSeparatorAndDecimalPointsFormatter();
    else if (typeof ((_e = this.concatOptions) == null ? void 0 : _e.formatter) === "object" ? ((_g = (_f = this.concatOptions) == null ? void 0 : _f.formatter) == null ? void 0 : _g.type) === "integer" : ((_h = this.concatOptions) == null ? void 0 : _h.formatter) === "integer")
      this.integerFormatter();
    else if (typeof ((_i = this.concatOptions) == null ? void 0 : _i.formatter) === "object" && (((_k = (_j = this.concatOptions) == null ? void 0 : _j.formatter) == null ? void 0 : _k.prefix) || ((_m = (_l = this.concatOptions) == null ? void 0 : _l.formatter) == null ? void 0 : _m.postfix)))
      this.prefixOrPostfixFormatter();
    noUiSlider.create(this.el, this.concatOptions);
    if (this.concatOptions.disabled)
      this.setDisabled();
  }
  formatValue(val) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    let result = "";
    if (typeof ((_a = this.concatOptions) == null ? void 0 : _a.formatter) === "object") {
      if ((_c = (_b = this.concatOptions) == null ? void 0 : _b.formatter) == null ? void 0 : _c.prefix)
        result += (_e = (_d = this.concatOptions) == null ? void 0 : _d.formatter) == null ? void 0 : _e.prefix;
      result += val;
      if ((_g = (_f = this.concatOptions) == null ? void 0 : _f.formatter) == null ? void 0 : _g.postfix)
        result += (_i = (_h = this.concatOptions) == null ? void 0 : _h.formatter) == null ? void 0 : _i.postfix;
    } else
      result += val;
    return result;
  }
  integerFormatter() {
    var _a;
    this.format = {
      to: (val) => this.formatValue(Math.round(val)),
      from: (val) => Math.round(+val)
    };
    if ((_a = this.concatOptions) == null ? void 0 : _a.tooltips)
      this.concatOptions.tooltips = this.format;
  }
  prefixOrPostfixFormatter() {
    var _a;
    this.format = {
      to: (val) => this.formatValue(val),
      from: (val) => +val
    };
    if ((_a = this.concatOptions) == null ? void 0 : _a.tooltips)
      this.concatOptions.tooltips = this.format;
  }
  thousandsSeparatorAndDecimalPointsFormatter() {
    var _a;
    this.format = {
      to: (val) => this.formatValue(
        new Intl.NumberFormat("en-US", {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        }).format(val)
      ),
      from: (val) => parseFloat(val.replace(/,/g, ""))
    };
    if ((_a = this.concatOptions) == null ? void 0 : _a.tooltips)
      this.concatOptions.tooltips = this.format;
  }
  setDisabled() {
    this.el.setAttribute("disabled", "disabled");
    this.el.classList.add("disabled");
  }
  // Static methods
  static getInstance(target, isInstance = false) {
    const elInCollection = window.$hsRangeSliderCollection.find(
      (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
    );
    return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
  }
  static autoInit() {
    if (!window.$hsRangeSliderCollection)
      window.$hsRangeSliderCollection = [];
    document.querySelectorAll("[data-hs-range-slider]:not(.--prevent-on-load-init)").forEach((el) => {
      if (!window.$hsRangeSliderCollection.find(
        (elC) => {
          var _a;
          return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
        }
      ))
        new _HSRangeSlider(el);
    });
  }
  // Backward compatibility
  static on(evt, target, cb) {
    const elInCollection = window.$hsRangeSliderCollection.find(
      (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
    );
    if (elInCollection)
      elInCollection.element.events[evt] = cb;
  }
};
window.addEventListener("load", () => {
  HSRangeSlider.autoInit();
});
if (typeof window !== "undefined") {
  window.HSRangeSlider = HSRangeSlider;
}
var range_slider_default = HSRangeSlider;

export {
  range_slider_default
};
/*! Bundled license information:

preline/src/plugins/range-slider/index.ts:
  (*
   * HSRangeSlider
   * @version: 2.5.0
   * @author: Preline Labs Ltd.
   * @license: Licensed under MIT and Preline UI Fair Use License (https://preline.co/docs/license.html)
   * Copyright 2024 Preline Labs Ltd.
   *)
*/
//# sourceMappingURL=chunk-6HNVIZDE.js.map
